<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>de.gedoplan</groupId>
    <artifactId>build-master</artifactId>
    <version>2022.10.1</version>
    <relativePath/>
  </parent>

  <groupId>de.gedoplan.showcase.next-lvl</groupId>
  <artifactId>pimp-jee</artifactId>
  <version>1.0-SNAPSHOT</version>

  <!--
    We are switching the maven packaging type from war (default) to jar in quarkus profile.
  -->
  <packaging>${packaging.type}</packaging>

  <properties>
    <packaging.type>war</packaging.type>

    <java.code.version>17</java.code.version>
  </properties>

  <repositories>
    <repository>
      <id>gedoplanPublic</id>
      <url>https://service.gedoplan.de/nexus/content/groups/public</url>
    </repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-api</artifactId>
      <version>8.0</version>
      <scope>provided</scope>
    </dependency>

    <!--
      After migrating to Jakarta EE:
      - remove all javax and jakarta dependencies above
      - activate the jakarta platfrom dependency below
    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-api</artifactId>
      <version>10.0.0</version>
      <scope>provided</scope>
    </dependency>
    -->

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.30</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <defaultGoal>package</defaultGoal>
    <finalName>${project.artifactId}</finalName>
  </build>

  <profiles>

    <!--
    Profile for upgrading the sources from JEE 8 to JEE 9+
    Run it with mvn -PtoJakarta rewrite:run

    After the upgrade, adjust this file by
    - including the jakarta.jakartaee-api dependency
    - removing all other jakarta.* dependencies
    -->
    <profile>
      <id>toJakarta</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.openrewrite.maven</groupId>
            <artifactId>rewrite-maven-plugin</artifactId>
            <version>5.7.1</version>
            <configuration>
              <activeRecipes>
                <recipe>org.openrewrite.java.migrate.jakarta.JavaxMigrationToJakarta</recipe>
                <recipe>org.openrewrite.java.migrate.jakarta.JavaxPersistenceXmlToJakartaPersistenceXml</recipe>
              </activeRecipes>
            </configuration>
            <dependencies>
              <dependency>
                <groupId>org.openrewrite.recipe</groupId>
                <artifactId>rewrite-migrate-java</artifactId>
                <version>2.1.0</version>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
    Profile for using WildFly Bootable Jar
    
    For building an additional WildFly hollow jar, run mvn -pwildfly package,
    and start the application with java -jar target/wildfly-bootable.jar -&#45;deployment=target/pimp-jee.war.

    Alternativly run the application in Dev Mode: mvn -pwildfly wildfly-jar:dev-watch.

    Note: WildFly 29 is a Jakarta EE 10 server, so you must migrate the project first!
    -->
    <profile>
      <id>wildfly</id>
      <properties>
        <wildfly.bootable.jar.version>10.0.0.Final</wildfly.bootable.jar.version>
        <wildfly.version>29.0.1.Final</wildfly.version>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-jar-maven-plugin</artifactId>
            <version>${wildfly.bootable.jar.version}</version>
            <configuration>
              <feature-packs>
                <feature-pack>
                  <location>wildfly@maven(org.jboss.universe:community-universe)#${wildfly.version}</location>
                </feature-pack>
                <feature-pack>
                  <groupId>org.wildfly</groupId>
                  <artifactId>wildfly-datasources-galleon-pack</artifactId>
                  <version>5.0.0.Final</version>
                </feature-pack>
              </feature-packs>
              <layers>
                <layer>jaxrs</layer>
                <layer>cdi</layer>
                <layer>jpa</layer>
                <layer>h2-default-datasource</layer>
                <layer>postgresql-driver</layer>
              </layers>
              <excluded-layers>
                <layer>deployment-scanner</layer>
              </excluded-layers>
              <cli-sessions>
                <cli-session>
                  <script-files>
                    <script>src/main/wildfly/showcase-ds.cli</script>
                  </script-files>
                  <resolve-expressions>true</resolve-expressions>
                </cli-session>
              </cli-sessions>
              <plugin-options>
                <jboss-maven-dist/>
              </plugin-options>
              <hollow-jar>true</hollow-jar>
              <output-file-name>wildfly-bootable.jar</output-file-name>
            </configuration>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>package</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>

      </build>
    </profile>

    <!--
    Profile for using Quarkus.
    
    For building the application, run mvn -Pquarkus package,
    and start the application with java -jar target/quarkus-app/quarkus-run.jar.

    Alternativly run the application in Dev Mode: mvn -pwildfly quarkus:dev.

    Note: Quarkus 3 uses JEE 10 libraries, so you must migrate the project first!
    -->
    <profile>
      <id>quarkus</id>
      <properties>
        <packaging.type>jar</packaging.type>

        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
        <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
        <quarkus.platform.version>3.4.1</quarkus.platform.version>

        <failsafe.useModulePath>false</failsafe.useModulePath>
        <skipITs>true</skipITs>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>${quarkus.platform.group-id}</groupId>
            <artifactId>${quarkus.platform.artifact-id}</artifactId>
            <version>${quarkus.platform.version}</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-resteasy-reactive-jsonb</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-hibernate-orm</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-jdbc-postgresql</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-junit5</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>io.rest-assured</groupId>
          <artifactId>rest-assured</artifactId>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>${quarkus.platform.group-id}</groupId>
            <artifactId>quarkus-maven-plugin</artifactId>
            <version>${quarkus.platform.version}</version>
            <extensions>true</extensions>
            <configuration>
              <systemProperties>
                <!--
                This system property is necessary only because we are switching the maven packaging type
                from war (default) to jar.
                See https://github.com/quarkusio/quarkus/issues/9727
                -->
                <quarkus.bootstrap.effective-model-builder>true</quarkus.bootstrap.effective-model-builder>
              </systemProperties>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>build</goal>
                  <goal>generate-code</goal>
                  <goal>generate-code-tests</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                <maven.home>${maven.home}</maven.home>
                <maven.repo>${settings.localRepository}</maven.repo>
                <!--
                This system property is necessary only because we are switching the maven packaging type
                from war (default) to jar.
                See https://github.com/quarkusio/quarkus/issues/9727
                -->
                <quarkus.bootstrap.effective-model-builder>true</quarkus.bootstrap.effective-model-builder>
              </systemPropertyVariables>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                <maven.home>${maven.home}</maven.home>
                <maven.repo>${settings.localRepository}</maven.repo>
                <!--
                This system property is necessary only because we are switching the maven packaging type
                from war (default) to jar.
                See https://github.com/quarkusio/quarkus/issues/9727
                -->
                <quarkus.bootstrap.effective-model-builder>true</quarkus.bootstrap.effective-model-builder>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
    Profile for building a Quarkus native application.

    This requires the quarkus profile as well, so the command for building is
    mvn -Pquarkus,native
    -->
    <profile>
      <id>native</id>
      <properties>
        <quarkus.package.type>native</quarkus.package.type>
        <quarkus.native.container-build>true</quarkus.native.container-build>
      </properties>
    </profile>
  </profiles>
</project>
